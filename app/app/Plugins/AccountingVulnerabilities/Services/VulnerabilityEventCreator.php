<?php

namespace App\Plugins\AccountingVulnerabilities\Services;

use App\Models\DepartamentType;
use App\Models\Event;
use App\Models\Form;
use App\Models\FormResult;
use App\Models\User;
use App\Plugins\AccountingVulnerabilities\Models\Vulnerability;
use App\Plugins\AccountingVulnerabilities\Models\VulnerabilityEvent;
use Exception;
use Illuminate\Support\Facades\DB;

class VulnerabilityEventCreator
{
    protected const KEYS = [
        '{название}' => 'name',
        '{краткое описание уязвимости}' => 'description',
        '{id уязвимости в системе идентификации уязвимостей bdu}' => 'bdu',
        '{id уязвимости в системе идентификации уязвимостей cve}' => 'cve',
        '{вектор атаки}' => 'vector',
        '{оценка критичности уязвимости}' => 'grade',
        '{возможные меры по устранению уязвимости}' => 'elimination',
        '{список по}' => 'softs',
    ];

    public static function create(
        User $user,
        array $vulnerabilityIds,
        array $departamentTypeIds,
        int $formId
    ): void {
        DB::transaction(function () use ($user, $vulnerabilityIds, $departamentTypeIds, $formId) {
            $vulnerabilities = Vulnerability::with('softs')
                ->whereIn('id', $vulnerabilityIds)
                ->get();

            $departamentTypes = DepartamentType::whereIn('id', $departamentTypeIds)
                ->get();

            $form = Form::findOrFail($formId);

            throw_if($vulnerabilities->isEmpty(), new Exception('Укажите уязвимости'));
            throw_if($departamentTypes->isEmpty(), new Exception('Укажите типы учреждений'));
            throw_if(empty($form), new Exception('Укажите форму'));

            $vulnerabilityEvent = VulnerabilityEvent::create([
                'form_id' => $form->id,
                'user_id' => $user->id,
            ]);

            $vulnerabilityEvent->vulnerabilities()->attach($vulnerabilities->pluck('id'));

            foreach ($departamentTypes as $departamentType) {
                $events = Event::createBy($form, $departamentType);

                foreach ($events as $event) {
                    $vulnerabilityEvent->events()->attach($event->id);

                    $structure = json_decode($event->form_structure);
                    foreach ($structure->fields as $field) {
                        if (empty($field->event_key) || !isset(static::KEYS[$field->event_key])) {
                            continue;
                        }

                        $key = static::KEYS[$field->event_key];

                        foreach ($vulnerabilities as $index => $vulnerability) {
                            $value = $key === 'softs'
                                ? implode('; ', $vulnerability->softs->pluck('name')->toArray())
                                : $vulnerability->$key;

                            FormResult::create([
                                'user_id' => $user->id,
                                'event_id' => $event->id,
                                'field_id' => $field->id,
                                'value' => $value,
                                'index' => $index,
                            ]);
                        }
                    }
                }
            }
        });
    }
}
