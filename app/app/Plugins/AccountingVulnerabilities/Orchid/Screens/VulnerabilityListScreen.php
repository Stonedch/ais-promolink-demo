<?php

namespace App\Plugins\AccountingVulnerabilities\Orchid\Screens;

use App\Models\Form;
use App\Orchid\Components\DateTimeRender;
use App\Orchid\Fields\Button;
use App\Plugins\AccountingVulnerabilities\Models\Vulnerability;
use App\Plugins\AccountingVulnerabilities\Models\VulnerabilityEvent;
use App\Plugins\AccountingVulnerabilities\Services\VulnerabilityEventCreator;
use Illuminate\Http\Request;
use Orchid\Screen\Actions\DropDown;
use Orchid\Screen\Actions\Link;
use Orchid\Screen\Fields\Select;
use Orchid\Screen\Screen;
use Orchid\Screen\TD;
use Orchid\Support\Facades\Layout;
use Orchid\Support\Facades\Toast;
use Throwable;

class VulnerabilityListScreen extends Screen
{
    public function name(): string
    {
        return 'Сбор и учет уязвимостей';
    }

    public function permission(): ?iterable
    {
        return [
            'platform.plugins.accounting-vulnerabilities.base',
        ];
    }

    public function query(): iterable
    {
        return [
            'vulnerabilities' => Vulnerability::filters()
                ->defaultSort('id', 'desc')
                ->with('softs')
                ->paginate(),

            'events' => VulnerabilityEvent::with(['form', 'user', 'vulnerabilities'])
                ->filters()
                ->defaultSort('id', 'desc')
                ->paginate(),
        ];
    }

    public function commandBar(): array
    {
        return [
            Link::make('Добавить уязвимостей')
                ->icon('plus')
                ->route('platform.plugins.vulnerabilities.create')
        ];
    }

    public function layout(): iterable
    {
        return [
            Layout::block(Layout::rows([
                Select::make('event.vulnerabilities')
                    ->multiple()
                    ->options(Vulnerability::pluck('name', 'id'))
                    ->title('Уязвимости'),

                Select::make('event.form')
                    ->empty('-')
                    ->options(Form::pluck('name', 'id'))
                    ->title('Форма для рассылки')
                    ->help('Ключи рассылки (указывать с фигурными скобками): <b>{название}</b>, <b>{краткое описание уязвимости}</b>, <b>{id уязвимости в системе идентификации уязвимостей bdu}</b>, <b>{id уязвимости в системе идентификации уязвимостей cve}</b>, <b>{вектор атаки}</b>, <b>{оценка критичности уязвимости}</b>, <b>{возможные меры по устранению уязвимости}</b>, <b>{список по}</b>'),
            ]))
                ->commands([
                    Button::make('Затребовать отчет')
                        ->icon('bs.check')
                        ->method('send'),
                ])
                ->vertical(true),

            // Таблица событий уязвимостей
            Layout::table('events', [
                TD::make('id', '#')
                    ->sort()
                    ->width(80),

                TD::make('form.name', 'Форма')
                    ->render(function (VulnerabilityEvent $event) {
                        return $event->form?->name;
                    }),

                TD::make('user.name', 'Инициатор')
                    ->render(function (VulnerabilityEvent $event) {
                        return $event->user?->getFullname();
                    }),

                TD::make('vulnerabilities', 'Уязвимости')
                    ->render(function (VulnerabilityEvent $event) {
                        return $event->vulnerabilities->pluck('name')->implode(', ');
                    })
                    ->width(300),

                TD::make('created_at', 'Дата создания')
                    ->usingComponent(DateTimeRender::class)
                    ->sort()
                    ->width(150),
            ]),

            // Оригинальная таблица уязвимостей
            Layout::table('vulnerabilities', [
                TD::make(__('Actions'))
                    ->align(TD::ALIGN_CENTER)
                    ->width(100)
                    ->render(fn(Vulnerability $vulnerability) => DropDown::make()
                        ->icon('bs.three-dots-vertical')
                        ->list([
                            Link::make('История изменений')
                                ->route('platform.plugins.vulnerabilities.history', $vulnerability->id)
                                ->icon('bs.journal'),

                            Link::make(__('Edit'))
                                ->route('platform.plugins.vulnerabilities.edit', $vulnerability->id)
                                ->icon('bs.pencil'),

                            Button::make(__('Delete'))
                                ->icon('bs.trash3')
                                ->confirm('Элемент будет удален')
                                ->method('remove', ['id' => $vulnerability->id]),
                        ])),

                TD::make('id', '#')
                    ->filter(TD::FILTER_NUMERIC)
                    ->sort()
                    ->defaultHidden()
                    ->width(100),

                TD::make('name', 'Название')
                    ->filter(TD::FILTER_TEXT)
                    ->sort()
                    ->width(200),

                TD::make('description', 'Описание')
                    ->filter(TD::FILTER_TEXT)
                    ->sort()
                    ->width(200),

                TD::make('bdu', 'Идентификатор BDU')
                    ->filter(TD::FILTER_TEXT)
                    ->sort()
                    ->width(200),

                TD::make('cve', 'Идентификатор CVE')
                    ->filter(TD::FILTER_TEXT)
                    ->sort()
                    ->width(200),

                TD::make('vector', 'Вектор атаки')
                    ->filter(TD::FILTER_TEXT)
                    ->sort()
                    ->width(200),

                TD::make('grade', 'Оценка критичности')
                    ->filter(TD::FILTER_TEXT)
                    ->sort()
                    ->width(200),

                TD::make('elimination', 'Меры по устранению')
                    ->filter(TD::FILTER_TEXT)
                    ->sort()
                    ->width(200),

                TD::make('created_at', 'Создано')
                    ->usingComponent(DateTimeRender::class)
                    ->filter(TD::FILTER_DATE_RANGE)
                    ->sort()
                    ->width(200),

                TD::make('updated_at', 'Обновлено')
                    ->usingComponent(DateTimeRender::class)
                    ->filter(TD::FILTER_DATE_RANGE)
                    ->sort()
                    ->width(200),
            ]),
        ];
    }

    public function remove(Request $request): void
    {
        Vulnerability::findOrFail($request->input('id'))->delete();
        Toast::info('Успешно удалено!');
    }

    public function removeEvent(Request $request): void
    {
        VulnerabilityEvent::findOrFail($request->input('id'))->delete();
        Toast::info('Событие уязвимости удалено!');
    }

    public function send(Request $request): void
    {
        try {
            VulnerabilityEventCreator::create(
                $request->user(),
                $request->input('event.vulnerabilities', []),
                $request->input('event.departament_types', []),
                $request->input('event.form')
            );

            Toast::info('Успешно создано!');
        } catch (Throwable $e) {
            Toast::error($e->getMessage());
        }
    }
}
