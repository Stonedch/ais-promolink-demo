<?php

declare(strict_types=1);

namespace App\Plugins\AccountingVulnerabilities\Orchid\Screens;

use App\Models\District;
use App\Models\DistrictDashboardParam;
use App\Plugins\AccountingVulnerabilities\Models\Vulnerability;
use App\Plugins\AccountingVulnerabilities\Models\VulnerabilitySoft;
use Illuminate\Http\Request;
use Illuminate\Support\Collection;
use Orchid\Screen\Actions\Button;
use Orchid\Screen\Fields\CheckBox;
use Orchid\Screen\Fields\Input;
use Orchid\Screen\Fields\Matrix;
use Orchid\Screen\Fields\TextArea;
use Orchid\Screen\Screen;
use Orchid\Support\Facades\Layout;
use Orchid\Support\Facades\Toast;
use Throwable;

class VulnerabilityEditScreen extends Screen
{
    public $vulnerability;

    public function query(Vulnerability $vulnerability): iterable
    {
        return ['vulnerability' => $vulnerability, 'softs' => $vulnerability->softs()->select('name')->get()];
    }

    public function name(): ?string
    {
        return 'Управление уязвимостью';
    }

    public function permission(): ?iterable
    {
        return [
            'platform.plugins.accounting-vulnerabilities.base',
        ];
    }

    public function commandBar(): iterable
    {
        return [
            Button::make('Сохранить')->icon('bs.check')->method('save'),
            Button::make('Удалить')->icon('bs.trash')->method('remove')->canSee($this->vulnerability->exists),
        ];
    }

    public function layout(): iterable
    {
        return [
            Layout::rows([
                Input::make('vulnerability.name')
                    ->require()
                    ->title('Название'),

                TextArea::make('vulnerability.description')
                    ->require()
                    ->title('Краткое описание уязвимости'),

                Input::make('vulnerability.bdu')
                    ->require()
                    ->title('ID уязвимости в системе идентификации уязвимостей BDU'),

                Input::make('vulnerability.cve')
                    ->require()
                    ->title('ID уязвимости в системе идентификации уязвимостей CVE'),

                Input::make('vulnerability.vector')
                    ->require()
                    ->title('Вектор атаки (в стандарте CVSS)'),

                Input::make('vulnerability.grade')
                    ->require()
                    ->title('Оценка критичности уязвимости (в стандарте CVSS)'),

                Input::make('vulnerability.elimination')
                    ->require()
                    ->title('Возможные меры по устранению уязвимости'),

                Matrix::make('softs')
                    ->title('Список ПО (в том числе версия, вендор, платформа)')
                    ->columns(['ПО' => 'name'])
                    ->fields(['name' => Input::make()->title('')]),
            ]),
        ];
    }

    public function save(Request $request, Vulnerability $vulnerability)
    {
        $vulnerability->fill($request->input('vulnerability', []))->save();
        $vulnerability->softs()->delete();
        foreach ($request->input('softs', []) as $soft) {
            if (empty($soft)) continue;
            VulnerabilitySoft::create(['name' => $soft['name'], 'vulnerability_id' => $vulnerability->id]);
        }
        Toast::info('Успешно сохранено!');
        return redirect()->route('platform.plugins.vulnerabilities.edit', $vulnerability);
    }

    public function remove(Vulnerability $vulnerability)
    {
        $vulnerability->delete();
        Toast::info('Успешно удалено');
        return redirect()->route('platform.plugins.vulnerabilities');
    }
}
