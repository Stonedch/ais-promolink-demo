<?php

namespace App\Plugins\AccountingVulnerabilities\Controllers\Api;

use App\Helpers\Responser;
use App\Http\Controllers\Controller;
use App\Plugins\AccountingVulnerabilities\Services\VulnerabilityHelper;
use Exception;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Throwable;

class VulnerabilityController extends Controller
{
    public function create(Request $request): JsonResponse
    {
        try {
            $user = $request->user();

            throw_if(empty($user), new Exception('no authorized'));
            throw_if($user->hasAccess('platform.plugins.accounting-vulnerabilities.base') == false, new Exception('no permissions'));
            throw_if($request->has('vulnerability.name') == false, new Exception('vulnerability.name is required'));
            throw_if($request->has('vulnerability.description') == false, new Exception('vulnerability.description is required'));
            throw_if($request->has('vulnerability.bdu') == false, new Exception('vulnerability.bdu is required'));
            throw_if($request->has('vulnerability.cve') == false, new Exception('vulnerability.cve is required'));
            throw_if($request->has('vulnerability.vector') == false, new Exception('vulnerability.vector is required'));
            throw_if($request->has('vulnerability.grade') == false, new Exception('vulnerability.grade is required'));
            throw_if($request->has('vulnerability.elimination') == false, new Exception('vulnerability.elimination is required'));

            $vulnerability = VulnerabilityHelper::create(
                $request->input('vulnerability.name'),
                $request->input('vulnerability.description'),
                $request->input('vulnerability.bdu'),
                $request->input('vulnerability.cve'),
                $request->input('vulnerability.vector'),
                $request->input('vulnerability.grade'),
                $request->input('vulnerability.elimination')
            );

            foreach ($request->input('softwares', []) as $software) {
                VulnerabilityHelper::addSoft($vulnerability, $software);
            }

            return Responser::returnSuccess();
        } catch (Throwable $e) {
            return Responser::returnError([$e->getMessage()]);
        }
    }
}
