<?php

namespace App\Plugins\AccountingVulnerabilities\Models;

use App\Models\Departament;
use App\Models\Event;
use App\Models\Form;
use App\Models\User;
use App\Plugins\EntityLogger\Observers\EntityLoggerObserver;
use Illuminate\Database\Eloquent\Attributes\ObservedBy;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Orchid\Filters\Filterable;
use Orchid\Filters\Types\Where;
use Orchid\Filters\Types\WhereDateStartEnd;
use Orchid\Screen\AsSource;

#[ObservedBy([EntityLoggerObserver::class])]
class VulnerabilityEvent extends Model
{
    use AsSource, Filterable;

    protected $table = 'vulnerability_events';

    protected $fillable = [
        'form_id',
        'user_id',
    ];

    protected $allowedFilters = [
        'id' => Where::class,
        'form_id' => Where::class,
        'user_id' => Where::class,
        'updated_at' => WhereDateStartEnd::class,
        'created_at' => WhereDateStartEnd::class,
    ];

    protected $allowedSorts = [
        'id',
        'form_id',
        'user_id',
        'updated_at',
        'created_at',
    ];

    public function form(): BelongsTo
    {
        return $this->belongsTo(Form::class);
    }

    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    public function departaments(): BelongsToMany
    {
        return $this->belongsToMany(
            Departament::class,
            'vulnerability_event_departamens',
            'vulnerability_event_id',
            'departament_id'
        )->withTimestamps();
    }

    public function vulnerabilities(): BelongsToMany
    {
        return $this->belongsToMany(
            Vulnerability::class,
            'vulnerability_event_vulnerabilities',
            'vulnerability_event_id',
            'vulnerability_id'
        )->withTimestamps();
    }

    public function events(): BelongsToMany
    {
        return $this->belongsToMany(
            Event::class,
            'vulnerability_event_events',
            'vulnerability_event_id',
            'event_id'
        )->withTimestamps();
    }
}
